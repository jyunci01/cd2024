<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://jyunci01.github.io/cd2024/">https://jyunci01.github.io/cd2024/</a></p>
<p>網誌: <a href="https://jyunci01.github.io/cd2024/blog">https://jyunci01.github.io/cd2024/blog</a></p>
<p>簡報:<a href="https://jyunci01.github.io/cd2024/reveal">https://jyunci01.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/jyunci01/cd2024">https://github.com/jyunci01/cd2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_sit</a>每週任務週任務</p>
<h1>每週任務</h1>
<h2>w1</h2>
<div>
<div><span> 建立個人倉儲</span></div>
<div><a href="https://github.com/jyunci01/cd2024">https://github.com/jyunci01/cd2024</a></div>
<br/>
<div><span> 下載可攜套件</span></div>
<div><span>下載可攜程式環境: portable_2024.7z (需要密碼, 下載 540MB, 解開壓縮後約 1.8GB)</span></div>
<br/>
<div><span>下載 miktex-portable.7z (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB)</span></div>
<br/>
<div><span> 設定 Github 帳號的雙重認證</span></div>
<div><span>說明如何設定 Github 雙重認證, 其中手機必須先安裝 Github Mobile, 也可以使用 Authy App 作為認證套件, 一旦在 Github 帳號下的 Setting 中的 Password and authentication 啟用雙重認證, 最後必須下載對應的 Recovery codes 並存入隨身碟, 而且要寄到個人的電子郵箱.</span></div>
<br/>
<div><span> 設定網誌</span></div>
<div><span><a href="https://jyunci01.github.io/cd2024/blog/index.html"> https://jyunci01.github.io/cd2024/blo</a>g</span></div>
</div>
<h2>w2</h2>
<div>
<div><span> 加入小組</span></div>
<div><a href="https://github.com/mdecd2024/2a-midag2">第二組</a></div>
</div>
<h2>w3</h2>
<div>
<div><span># 將個人倉儲納入分組倉儲的子模組</span></div>
<br/>
<div><span># 翻譯所分配到的頁數</span></div>
<div><a href="https://github.com/jyunci01/cd2024/blob/main/downloads/41123105_page12_22.pdf"><span>page12~22</span></a></div>
<div></div>
</div><h2>w4</h2>
<div>
<div><span> 將之前入製的影片加入文字</span></div>
<div><span>影片名稱:cd2024_2a_w3_如何將學員倉儲設為分組倉儲的子模組</span></div>
<div><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/IAQ9cHwHjWA?si=1D8BBL8KXrLZhVlX" title="YouTube video player" width="560"></iframe></span></div>
</div>
<div>
<div><a href="https://1drv.ms/t/c/9a62b67559925288/IQMOyy2urJbiTI6EwkQGPGf3ASq4tgQi5eO2oqd_pCZ3iP8">影片逐字檔</a></div>
<div><span></span></div>
</div>
<h2>w5</h2>
<div><a href="https://mdecd2024.github.io/2a-midag2/blog/W4%E5%BD%B1%E7%89%87%E7%BF%BB%E8%AD%AF%E8%88%87%E9%80%90%E5%AD%97%E7%A8%BF.html"> 將之前入製的影片加入文字加入分組blog裡及自評</a></div>
<h2>w6</h2>
<div>
<div><span>將自己每週更新的內容推回去分組倉儲</span></div>
</div>
<h2>w7</h2>
<div>
<div><span>放假</span></div>
</div>
<h2>w8</h2>
<div>
<div><span>1.將組員各週的網誌合併至分組網誌</span></div>
<div><span>2.將個人一分鐘的影片報告放到各分組網誌, 說明已經完成的個人與團隊分配任務製作結果.</span></div>
<div><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/uq_HI2XQ6JY" title="個人與團隊分配任務製作結果" width="560"></iframe> </span></div>
</div>
<h2>w9</h2>
<p>使用latex編寫翻譯</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">\documentclass{article}
\usepackage{CJK}
\usepackage{fontspec}
\usepackage{graphicx}  
\setmainfont{Noto Serif CJK SC}
\usepackage[top=2cm, bottom=2cm, left=3cm, right=3cm, a4paper]{geometry}


\begin{document}



\begin{center}
\textbf{2.  CHAPTE}
\end{center}
\begin{center}
THEORETICAL BACKGROUND 
\end{center} 
This chapter is a brief introduction to the different systems that deal with data production collection and processing around the concept of enhancing  all aspects of production that are favored by the academic community as well as the current and future state of industry for which these systems should prove to be indispensable. 

本章簡要介紹了圍繞學術界所青睞的增強生產各個方面的概念處理資料生產收集和處理的不同\\
系統，以及這些系統應證明的當前和未來的行業狀況成為不可或缺的。
It is important to notice from this part that these are not completely separate information systems. They start from different perspectives and they try to solve different problems but because of broad definitions they unavoidably expand into each other. That represents a problem on its own since from the available literature it becomes difficult to pinpoint where the boundary of a system ends and another one starts. 

從這一部分中值得注意的是，這些並不是完全獨立的訊息系統。他們從不同的角度出發，嘗試\\解決不同的問題，但由於定義廣泛，它們不可避免地會相互擴展。這代表了一個問題本身，因為\\從現有文獻中很難找出問題出在哪裡一個系統的邊界結束，另一個系統的邊界開始。 
 
The Odoo management software (that is a topic of this work) considers PLM mainly as a tool for tracking change and improvements, while other key characteristics of PLM, like the use of digital items (later detailed at section 2.1), is a base characteristic of the material requirements planning which is a tool utility that also dabbles into MES.   
Odoo 

管理軟體（這是本工作的主題）主要將 PLM 視為追蹤變更和改進的工具，而 PLM 的其他關鍵\\特徵（例如數位專案的使用（稍後在第 2.1 節中詳細介紹））是基本特徵物料需求計劃是一種工具\\實用程序，也涉足MES。
\begin{center}
 \includegraphics[width=15cm]{螢幕擷取畫面 2024-04-26 173919.png}
 \end{center}
2.1. Product lifecycle management 

Any information produced by an individual or team is done by an empirical creative process. A task requires either previous knowledge/experience or it will be inevitably plagued by mistakes and corrections, which in turn generates said experience in exchange of time and resources. That experience is, traditionally, embedded in the human resource (employee) that produced the information in the first place. 

個人或團隊產生的任何資訊都是透過經驗創作過程完成的。 一項任務要么需要先前的知識/經驗\\，要么將不可避免地受到錯誤和糾正的困擾，這反過來又會產生所述經驗，以換取時間和資源。\\ 傳統上，這種經驗嵌入最初產生資訊的人力資源（員工）。
 
Product Life-Cycle Management (PLM) is an organizational process that aims to control the flow of information regarding all aspects of a product throughout its life-cycle. As one can imagine, this definition, and its broad scope, does not make understanding PLM any easier. The thing to focus on, for all purposes, is that PLM true value is in what concerns change.  

產品生命週期管理 (PLM) 是一個組織流程，旨在控制產品整個生命週期各個面向資訊的流動。 可以想像，這一定義及其廣泛的範圍並沒有讓理解 PLM 變得更容易。 出於所有目的，需要重點關\\注的是 PLM 的真正價值在於關注變化。
 
  
Figure 1 Product lifecycle stages (Tripaldi, 2019) 
 
PLM is above all a connecting technology, not an individual technology islet or information processing system  (Saaksvuori and Immonen, 2008). The idea is that every information produced by company personnel  holds value equivalent to the time and money invested. Using that information saves money, not using that information wastes money. This is easier to understand when looking to a design process.  
 
 PLM 首先是一種連結技術，而不是一個單獨的技術島或資訊處理系統（Saaksvuori 和 Immonen，2008）。 我們的想法是，公司人員產生的每個訊息都具有與投入的時間和金錢相當的價值。 使用該資訊可以節省金錢，而不使用該資訊會浪費金錢。 當查看設計過程時，這一點更容易理解。
 
E.g. if an engineer designs an electronic circuit, the file holding the CAD drawing has an equivalent value to the time and money invested in it. The problem comes from the fact that in a traditional system only the engineer knows the design process behind the file, the extent of what is inside and its possible uses. While, from the perspective of the rest of the company, that is just a file in the database alongside thousands of others. The result is that, on its own, the information is of limited use.  

 例如。 如果工程師設計電子電路，保存 CAD 圖紙的文件與投入的時間和金錢具有相同的價值。 問題在於，在傳統系統中，只有工程師知道文件背後的設計過程、內部內容的範圍及其可能的用途。 然而，從公司其他部門的角度來看，這只是資料庫中的一個文件，與數千個其他文件一起。 結果是\\，這些資訊本身的用途有限。
 
If by any chance there is another engineer working in a similar design it will become extremely difficult for him/her to find that file and use it in his own design. Ultimately this results in waste because Engineer\#2 will have to spend more time and money doing something that was already made just because that information was not easily available or well organized.  
 
 如果萬一有另一位工程師從事類似的設計，他將很難找到該文件並在自己的設計中使用它。 最\\終這會導致浪費，因為工程師\#2將不得不花費更多的時間和金錢來做一些已經完成的事情，因為\\這些資訊不容易獲得或組織良好。
 
This scenario is not limited to product design, but also to all aspects of the product lifecycle that produces change over time. Someone had to orchestrate how that piece will be produced , how that piece will be moved,packed , distributed and disposed of. When a problem is found or improvements are possible those changes also produce information and consume resources. If the company cannot take advantage of that existing information about all those phases of the product conception it will waste resources at every single redesign.  
 
 這種場景不僅限於產品設計，還包括隨著時間的推移而產生變化的產品生命週期的各個方面。\\ 必須有人精心策劃如何生產該作品，如何移動、包裝、分發和處置該作品。 當發現問題或可能進\\行改進時，這些變更也會產生資訊並消耗資源。 如果公司不能利用有關產品構思所有這些階段的\\現有信息，那麼每次重新設計都會浪費資源。

Product Lifecycle Management consists of an information system that allows information and knowledge sharing within and between organizations (Sudarsan et al., 2005) minimizing the waste by controlling and organizing  those files with information that would otherwise be carried only by the human resource that produced said files. The way it accomplishes that is by virtualizing all components of the product life-cycle in the form of digital “items” in an object oriented architecture. As explained by (Saaksvuori and Immonen, 2008),an item is a systematic and standard way to identify, encode and name a product, a product element or module, a component, a material or a service. 

 產品生命週期管理由一個資訊系統組成，該系統允許組織內部和組織之間共享資訊和知識（Sud\\arsan et al., 2005），透過控制和組織那些包含資訊的文件，從而最大限度地減少浪費，否則這些\\文件只能由生產所述產品的人力資源攜帶文件。 它實現這一目標的方式是在物件導向的架構中以數\\位「專案」的形式虛擬化產品生命週期的所有元件。 如（Saaksvuori 和 Immonen，2008）所解\\釋的，項目是識別、編碼和命名產品、產品元素或模組、組件、材料或服務的系統和標準方法。
 
These item objects are, by all means, virtual representations that hold metadata regarding what it tries to represent and allows to connect and link the information. As described by (D’Antonio et al., 2015) product information should be connected to its production process. PLM allows to link defined processes to the product and to provide constraints on the order of process execution.  E.g. a CAD drawing for a circuit schematic is attached to a virtual circuit object that holds basic information about what is contained in the file and all the previous iterations of that file over time as well as links to items representing which bill of materials (BOM) it belongs to, the machines necessary to manufacture it, the processes necessary to assemble it and more importantly how all those items changed over each improving iteration.  

 無論如何，這些項目物件都是虛擬表示，它們保存有關其試圖表示的內容的元數據，並允許連\\接和連結資訊。 如（D’Antonio 等人，2015）所述，產品資訊應與其生產過程相關聯。 PLM 允\\許將定義的流程連結到產品，並對流程執行的順序提供約束。 例如。 電路原理圖的 CAD 繪圖附加\\到虛擬電路對象，該對象保存有關文件中包含的內容以及該文件隨時間推移的所有先前迭代的基本\\信息，以及表示其物料清單 (BOM) 的項目的鏈接屬於，製造它所需的機器，組裝它所需的流程，更\\重要的是所有這些項目在每次改進迭代中如何變化。
 
This all-around virtualization gives precious context to information otherwise lost on its own complexity. It allows for faster access, easier understanding of the whole and the consequences of what happens when there is change for each part. This is the best way of organizing the existing data for future reference because it allows for structure as well as transparency.   
 
 這種全方位的虛擬化為資訊提供了寶貴的背景信息，否則會因其自身的複雜性而丟失。 它允許\\更快地訪問、更容易理解整體以及每個部分發生變化時所發生的後果。 這是組織現有資料以供將來\\參考的最佳方式，因為它允許結構和透明度。
 
To sum up, PLM as a system aims to track functional change in all aspects regarding the product life, in a way that the company can benefit strategically from it by avoiding informational waste. It does so by virtualizing the real thing in the form of digital items that store the files regarding what the item is supposed to represent. These can in turn be correlated and tracked over time using metadata. 
 
 總而言之，PLM 作為一個系統，旨在追蹤產品生命週期各個方面的功能變化，從而使公司能\\夠透過避免資訊浪費來策略性地從中受益。 它透過以數位項目的形式虛擬化真實事物來實現這一\\點，這些項目儲存有關該項目應該代表的內容的文件。 這些又可以使用元資料隨著時間的推移進\\行關聯和追蹤。
 
2.2. Enterprise Resource Planing 
In the early days of information systems, one of the first systems to find wide implementation was the called MRP (Material Requirements Planning). Although not necessarily software based, this system wide implementation was a natural consequence of computing technology and it aimed to solve bottlenecks regarding the material supplying and product output by calculating the material needs for production. As it became more ubiquitous in the enterprise in the late 70’s and early 80’s the system evolved. This gave origin to MRP II (Manufacturing Resource Planning) and, more important to the scope of this paper, ERP (Enterprise Resource Planning). 

 在資訊系統的早期，最早被廣泛實施的系統之一是 MRP（物料需求計劃）。 儘管不一定基於軟\\體，但這種系統範圍的實施是計算技術的自然結果，旨在透過計算生產的材料需求來解決材料供應\\和產品輸出的瓶頸。 20 世紀 70 年代末和 80 年代初，隨著它在企業中變得越來越普遍，該系統也在\\不斷發展。 這催生了 MRP II（製造資源計劃），以及對本文範圍更重要的 ERP（企業資源計劃）。
 
For the most part modern Enterprise Resource Planning expands the original MRP function to encompass many other aspects of enterprise operations all while adding modularity to the system.  

 現代企業資源規劃在很大程度上擴展了原始 MRP 功能，以涵蓋企業營運的許多其他方面，同時\\為系統添加了模組化功能。
 
Modern ERP systems are often module based; different modules have different user interfaces and different user groups. For example, Manufacturing module, Procurement module, Logistics module, Financial module, Maintenance module, Sales module. (Saaksvuori and Immonen, 2008). These modules expand across many domains of knowledge but for the most part they do so always from the perspective of Production, Sales and Service.
 
 現代 ERP 系統通常是基於模組的； 不同的模組有不同的使用者介面和不同的使用者群組。 例如\\，製造模組、採購模組、物流模組、財務模組、維護模組、銷售模組。 （Saaksvuori 和 Immonen，2008）。 這些模組涵蓋了許多知識領域，但大多數情況下，它們總是從生產、銷售和服務的\\角度進行。
 
 \begin{center}
 \includegraphics[width=15cm]{螢幕擷取畫面 2024-04-26 173941.png}
 \end{center}
 Figure 2 depicts the scope of the ERP system in comparison to other Information systems.  
 \begin{center}
 圖 2 描述了 ERP 系統與其他資訊系統相比的範圍。
 \end{center}
  
Figure 2 Visual representation of the scope of different information systems (Adapted from Stark 2015) 
This sort broad reach across the domains makes sense because the ERP operations, as were in the case of MRP, focus on handling transactions and orders. The focus of the ERP is controlling the change in input, retention and output of resources to the company, be of products, raw materials or packing. 

 這種跨領域的廣泛影響是有意義的，因為 ERP 操作與 MRP 一樣，專注於處理交易和訂單。 ERP 的重點在於控制公司資源（產品、原料或包裝）的輸入、保留和輸出的變化。
 
From the same image, it is possible to see the theoretical contrast between PLM and ERP even though they are both extremely broad. While ERP expands across the domains of knowledge but limits itself to a few functions, PLM expands across all functions that involve the product. As portrayed by  

從同一張圖中，可以看出 PLM 和 ERP 之間的理論差異，儘管它們的範圍都非常廣泛。 ERP 擴展了知識領域，但僅限於少數功能，而 PLM 擴展了涉及產品的所有功能。 


\begin{center}
 \includegraphics[width=15cm]{螢幕擷取畫面 2024-04-26 173948.png}
 \end{center}
Figure 3, another point of view that represents a good difference between the two is the lack of overlap in what concerns the scale or level of detail in which ERP and PLM affects the industry (i.e. the granularity of the two systems).

如圖 3 所示，代表兩者之間良好差異的另一個觀點是 ERP 和 PLM 影響行業的規模或詳細程度\\（即兩個系統的粒度）方面缺乏重疊。
 
  
Figure 3 Visual comparison of ERP and PLM concerning granularity (Adapted from Stark, 2015) 
 
As we can see, ERP is primarily concerned with the transaction and the order. Once an order is closed out, the ERP system processes the transactions with respect to that order but is not very much concerned with the order beyond that. On the other hand, PLM’s granularity is concerned with the order for the product and extends not only into the program, but into the family and the entire industry (Stark, 2015). 

 正如我們所看到的，ERP 主要關注的是交易和訂單。 一旦訂單關閉，ERP 系統就會處理與該\\訂單相關的交易，但不太關心除此之外的訂單。 另一方面，PLM 的粒度涉及產品的訂單，不僅\\擴展到項目，而且擴展到家庭和整個行業（Stark，2015）。
 
This is particularly interesting because it demonstrates how the two systems can and do complement each other in the field. One of the aspects of ERP that should point out is that it is comparatively easier to integrate with other systems. ERP-MES integration for instance has been widely studied and implemented to the point where standards have been developed for it (ISA 95 - IEC 62264). One argument for this is the modular nature of the ERP system which is discussed further in the paper in (Chapter 5) with the analysis of the Odoo software. That is because the Odoo software evolved originally from an open-source ERP system. 

 這是特別有趣的，因為它展示了這兩個系統如何能夠並且確實在該領域中相互補充。 ERP值得\\指出的一方面是它與其他系統的整合相對容易。 例如，ERP-MES 整合已被廣泛研究和實施，並已\\為其製定了標準（ISA 95 - IEC 62264）。 對此的一個論點是 ERP 系統的模組化性質，這將在本文\\（第 5 章）中透過對 Odoo 軟體的分析進行進一步討論。 這是因為 Odoo 軟體最初是從開源 ERP 系統發展而來的。
 
The nature of the ERP system is best summed up by (Umble et al. 2003): ERP provides a unified enterprise view of the business which encompasses all functions and departments, and an enterprise database in which all actions concerning finance, sales, marketing, purchasing and human resources are traced. The aim of this achieving is to expand the customers target and increase customers share in a market that slowly pivots to innovation (Vásquez and Escribano, 2017).

 ERP 系統的本質可以這樣概括（Umble et al. 2003）：ERP 提供了一個統一的
 企業業務視圖，\\其中包含所有職能和部門，以及一個企業資料庫，其中涉及財務、銷售、行銷、採購和人力資源都\\被追蹤。 實現這一目標的目的是擴大客戶目標並增加緩慢轉向創新的市場中的客戶份額（Vásquez 和 Escribano，2017）。
 
2.3. Manufacturing Execution System  
The final key of a fully integrated system would be the Manufacturing Execution System (MES). A MES is a layer of communication between the management and the production levels; it is a software that allows data exchange between the organizational level, usually supported by an ERP, and the shop-floor control systems, in which several, different, very customized software applications are employed (Meyer et al., 2009). 

  完全整合系統的最後一個關鍵是製造執行系統（MES）。 MES 是管理階層與生產層之間的溝通\\層； 它是一種允許組織層面（通常由 ERP 支援）和車間控制系統之間進行資料交換的軟體，其中採\\用了多種不同的、高度客製化的軟體應用程式（Meyer 等人，2009 年）。

\begin{center}
 \includegraphics[width=15cm]{螢幕擷取畫面 2024-04-26 174020.png}
 \end{center}
Figure 4 is a nice depiction of how different systems fit within the scope of manufacturing and development. 

圖 4 很好地描述了不同的系統如何適應製造和開發的範圍。
  
Figure 4 Visual representation of the roll of different systems including MES (Adapted from mescenter.org) 
 
For all purposes MES main goal is to provide the numbers and data that ultimately is used to ascertain the condition and quality of not only the products but also all the processes that affect production. Machines, sensors, and anything that comes in contact with the product and provides output of any kind, basically, handing said data to the MES for sorting and processing in real time. E.g. if a manager wants to know the instant production numbers or to see a graphical representation of the rejection rate, that data will be available from a MES software.  
 
 出於所有目的，MES 的主要目標是提供最終用於確定產品以及影響生產的所有流程的狀況和品\\質的數字和數據。 機器、感測器以及與產品接觸並提供任何類型輸出的任何東西，基本上將所述資\\料傳遞給 MES 進行即時分類和處理。 例如。 如果經理想要了解即時生產數據或查看廢品率的圖形\\表示，則可以從 MES 軟體取得該數據。
 
Traditionally it is from this sort of information that management will evaluate efforts and make decisions. As mentioned before this sort of data collection fits perfectly to the use of ERP not only because the management of resources can be much more detailed if complemented by real time production data but also because the modularity of ERP usually means a seamless integration. MES (like ERP) has also been proven and implemented for decades and their implementation have already been standardized to a reasonable degree. 
 
 傳統上，管理層將根據此類資訊評估工作並做出決策。 如前所述，這種數據收集非常適合 ERP 的使用，不僅因為如果輔以即時生產數據，資源管理可以更加詳細，而且還因為 ERP 的模組化通常\\意味著無縫整合。 MES（如 ERP）也已被證明和實施了數十年，其實施已達到合理的標準化程度。
 
The functionalities of a MES have been grouped in 11 categories by MESA International (1997); furthermore, the tasks for each enterprise layer and, in turn, for each kind of information system are listed in the ISA95 – IEC62264 (2013) standard. This standard also provides definitions for the data structures to be exchanged among information systems aiming to enhance their integration; however, it mainly focuses on ERP-MES-Shop floor integration (D’Antonio et al., 2015). 

 MESA International (1997) 將 MES 的功能分為 11 類； 此外，ISA95 – IEC62264 (2013) 標準中列出了每個企業層以及每種資訊系統的任務。 該標準還提供了資訊系統之間交換的資料結構\\的定義，旨在增強資訊系統的整合度； 然而，它主要關注 ERP-MES-車間整合（D’Antonio 等\\，2015）。
 
PLM studies by comparison are much more recent and PLM-MES integration, a main focus of this work, even more so. The challenge of this sort of integration and the state of the art regarding it was be covered in (Chapter 3) as well as the theoretical structure behind it. For now, suffice to point out that since MES provides the feedback by which changes are orchestrated and results are validated by generating information in the form of files and PLM focus on the tracking change by file organization there sure is value in the PLM-MES integration. 

相較之下，PLM 研究是較新的，而 PLM-MES 整合（這項工作的主要焦點）更是如此。 （第 3 章）及其背後的理論結構涵蓋了這種整合的挑戰和相關的最新技術。 目前，只需指出，由於 MES 提供回饋，透過產生文件形式的資訊來編排變更並驗證結果，而 PLM 專注於按文件組織追蹤變更，\\因此 PLM-MES 整合肯定具有價值。

2.4. Industry 4.0  
The term Industry 4.0 is one mentioned time and time again in modern literature as the next or current step in the evolution of production. It represents what is the 4th industrial revolution where the first was marked the adoption of steam power, the second was marked mainly using electrical power and the 3rd was characterized by the implementation of digital technology. Figure 5 nicely represents the progression of industrial revolutions. 

工業 4.0 一詞在現代文獻中被多次提及，被視為生產演變的下一步或當前步驟。 它代表了第四次\\工業革命，第一次工業革命的特徵是蒸汽動力的採用，第二次工業革命的特徵是主要使用電力，第\\三次工業革命的特徵是數位技術的實施。 圖 5 很好地展示了工業革命的進展。
  

 \begin{center}
 \includegraphics[width=15cm]{螢幕擷取畫面 2024-04-26 174028.png}
 \end{center}
 \begin{center}
 Figure 5 The industry evolution (Adapted from STANCIOIU Alin, 2017)
  \end{center}
In broad strokes the 4th industrial revolution is (or will be) ultimately marked by the full integration between digital connectivity and production. As it is well known that the development of digital networks is the pivotal technology that sustain the modern world. It has changed the way humans interact and do business. However, whether the current level in which it is applied to the industry constitutes an industrial revolution is still uncertain because in all other revolutions have been marked by a violent increase in production that is yet to happen this time around. In fact, we are still to reach a shared definition of Industry 4.0. 

 從廣義上講，第四次工業革命的最終標誌是（或將）數位連接與生產之間的全面整合。 眾所周知\\，數位網路的發展是維持現代世界的關鍵技術。 它改變了人類互動和開展業務的方式。 然而，目前\\它應用於工業的水平是否構成工業革命仍然不確定，因為在所有其他革命中，其標誌都是產量的劇烈\\增加，而這一次尚未發生。 事實上，我們仍然沒有對工業4.0達成共同的定義。
 
What has been widely accepted however is that there are at least 3 technologies that characterize Industry 4.0. Those are the Internet of things (IoT), Cloud computing and the development of Cyber-Physical Systems (CPS), the last of which is particularly important for the context of this thesis.  

 然而，人們普遍認為至少有 3 種技術可以表徵工業 4.0。 這些是物聯網（IoT）、雲端運算和網\\路物理系統（CPS）的發展，最後一個對於本論文的背景尤其重要。
 
CPS are systems consisting in a real entity (for example, a machine) and its corresponding virtual model – embedding all the models for mimicking the behavior of the real counterpart – capable to communicate with each other (D’Antonio et al., 2017). The idea is that, if one were to develop a digital twin (DT) of all physical instruments regarding a process in a system that allows for the digital counterparts to interact with each other as well as interacting with the physical world, innovation or change of said process would occur much faster and effectively. E.g., an engineer could simulate a change using the DT’s interaction, then, if successful, apply the change automatically to the production line in real time, execute tests, gather data and feed it back to the system without the need of manual input with all being done through the network. 
 
 CPS 是由真實實體（例如機器）及其相應的虛擬模型組成的系統 - 嵌入所有用於模仿真實對應\\物行為的模型 - 能夠相互通信（D'Antonio 等人，2017） 。 這個想法是，如果要開發所有實體儀\\器的數位孿生（DT），涉及系統中的一個過程，允許數位對應物相互交互以及與物理世界交互，\\創新或改變該過程將發生得更快、更有效。 例如，工程師可以使用DT的交互來模擬變更，然後，\\如果成功，則將變更自動即時應用到生產線，執行測試，收集數據並將其反饋給系統，而無需手動\\輸入所有內容是透過網路完成的。
 
The main point to be derived from all this is that PLM-MES systems possibly are the first step to achieve a proper CPS since it provides for the virtualization and necessary control to reach something near a virtual twin. The debatable matter is how deep is its current effect in industrial application.  

 從這一切中得出的要點是，PLM-MES 系統可能是實現適當 CPS 的第一步，因為它提供了虛擬\\化和必要的控制來達到接近虛擬孿生的效果。 值得爭議的問題是它目前在工業應用中的影響有多深。
 
Nonetheless, the term Industry 4.0 is, if anything, a useful denotation to the increasing application of digital connectivity, network development and the internet to industry.  

 儘管如此，工業 4.0 這個術語如果有的話，也是對數位連接、網路發展和互聯網在工業中日益增\\長的應用的有用表示。
 
Another term often included within the scope of Industry 4.0 is the called Lot Size One or Lot 1. This is the idea of each item customized to the individual specifications of the buyer in a system in which a customer order does not start supply chain equipment moving; it turns on manufacturing machines.  

工業4.0 範圍內經常包含的另一個術語稱為「批量大小一」或「批量1」。供應鏈設備移動; 它打\\開製造機器。

The theory behind it is that as production and development becomes more and more flexible as this sort of manufacturing becomes not only viable but also attractive. Having a tailored requested product means that there are no storage requirements, no inventory overhead, and of course a 100 \% guaranteed sell. This concept is not new by any means, in fact it predates Industry 4.0 quite a lot. In the book “The machine that changed the world” the authors (Womack et al., 1990) discuss that toward this end, lean producers employ teams of multiskilled workers at all levels of the organization and use highly flexible, increasingly automated machines to produce volumes of products in enormous variety. 
 
 背後的理論是，隨著生產和開發變得越來越靈活，這種製造不僅變得可行而且有吸引力。 擁有\\量身訂製的需求產品意味著沒有儲存要求、沒有庫存開銷，當然還有 100\% 的銷售保證。 無論如何\\，這個概念並不新鮮，事實上它早在工業 4.0 之前就出現了。 在《改變世界的機器》一書中，作者\\（Womack 等人，1990）討論了為此目的，精益生產者在組織的各個層面僱用多技能工人團隊\\，並使用高度靈活、自動化程度越來越高的機器來生產大量種類繁多的產品。
 
In a way ‘Lot Size One’ is nothing more than the extrapolation of this sort of thinking. Of course, the industry is yet to reach such level of production flexibility, but glimpses of this sort of mentality can already be seem on more modular productions. One of the best examples is amazon packing systems. E.g. a customer receives a package from Amazon containing a mix of products that has been packaged just for him/her according to their specific order. Although superficial in nature, this represents a high level of customization for the customer.  

 在某種程度上，「批量一」只不過是這種思考的推論。 當然，該行業尚未達到這樣的生產靈活\\性水平，但這種心態已經可以在更模組化的生產中看到。 最好的例子之一是亞馬遜包裝系統。 例\\如。 客戶收到亞馬遜的包裹，其中包含根據其特定訂單專門為他/她包裝的產品組合。 雖然本質上\\很膚淺，但這代表了客戶的高水準客製化。
 
Another great example is electronics prototyping. Currently there are companies that take your printed circuit board designs and BOM, delivering small batches of assembled prototypes at a low cost. Prototyping of electronical devices used to be a highly expensive process, but some companies have flexibilized their production to the degree where they are able to deliver it fast and reliably. Again, that is possible because electronics components are inherently modular systems even if of high complexity. The following image (Figure 6 Example project of power supply adaptor circuit) is an example of an electronic circuit that was designed by this student and manufactured by JLCPCB within a single week.   

 另一個很好的例子是電子原型設計。 目前，有些公司會採用您的印刷電路板設計和 BOM，以低\\成本提供小批量的組裝原型。 電子設備的原型設計曾經是一個非常昂貴的過程，但一些公司已經將\\其生產靈活化到能夠快速可靠地交付的程度。 同樣，這是可能的，因為電子元件本質上是模組化系\\統，即使其複雜性很高。 下圖（圖6電源適配器電路範例專案）是該學生設計並由JLCPCB在一週內\\製造的電子電路範例。
 
\begin{center}
 \includegraphics[width=15cm]{螢幕擷取畫面 2024-04-26 174039.png}
 \end{center}
 \begin{center}
Figure 6 Example project of power supply adaptor circuit 
  \end{center}
  
All and all, the result is again a greater need for control and management of change. Which means the implementation of a PLM-MES system would be of great help. PLM would be required to manage change and innovation throughout the lifecycle of small batch products and MES would provide the real time reaction and feedback necessary to reduce errors that could cause losing a whole batch. 

 總而言之，結果再次是對變革的控制和管理的更大需求。 這意味著PLM-MES系統的實施將會\\有很大的幫助。 PLM 需要在小批量產品的整個生命週期中管理變更和創新，而 MES 將提供必要\\的即時反應和回饋，以減少可能導致整批產品遺失的錯誤。


\end{document}

</pre>
<p><br/><br/></p>
<h2>w10</h2>
<div>
<h4><span>(任務一)</span></h4>
<span>列出個學員的資訊</span></div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import window, ajax, document, html
  
def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt"
    
  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text
    
      # 依照換行符號拆分資料
      lines = content.split('\n')
    
      # 建立空列表儲存資料
      data = []
    
      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue
    
        # 依照逗號拆分資料
        items = line.split(',')
    
        # 將拆分後的資料加入列表
        data.append(items)
        
      # 必須去除 data 的第一列標題資料, 只取序號為 1 之後的資料
      data = data[1:]
    
      # 取得 html 可以插入的標註位置
      brython_div = document["brython_div1"]
      course_title = "cd2024"
  
      # 逐一處理學員資料
      index = 0
      for items in data:
        index += 1
        student_id, github_username, group = items
          
        if github_username == "":
          github_username = "000"
          
        # 建立網站和倉儲連結，使用正確的模板
        site_url = f"https://{github_username}.github.io/{course_title}"
        repo_url = f"https://github.com/{github_username}/{course_title}"
        group_site_url = f"https://mdecd2024.github.io/2a-midag{group}"
        group_repo_url = f"https://github.com/mdecd2024/2a-midag{group}"
  
        # 添加學號, 網站, 倉儲連結和序號到 brython_div
        brython_div &lt;= str(index) + ". " + html.A(student_id, href=site_url)
        brython_div &lt;= " ("
        brython_div &lt;= html.A("repo", href=repo_url)
        brython_div &lt;= ") | "
        brython_div &lt;= html.A("Group Site", href=group_site_url)
        brython_div &lt;= " | "
        brython_div &lt;= html.A("Group Repo", href=group_repo_url)
        brython_div &lt;= html.BR()
  
    else:
      print("Error:", req.text)
    
  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()
    
# 呼叫函式讀取 CSV 資料
fetch_csv_data()
</pre>
<span><br/></span></div>
<div>
<div>
<h4>(任務二)</h4>
<p>各篇論文要點摘要</p>
<h4>文章一  : <span>Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究)</span></h4>
<p><span>摘要內容 : </span><span>通過實施自動控制理論穩定動態系統時的局限性, </span><span>球平衡平臺的構造和理論研究, 通過實施穩定動態系統時的局限性自動控制理論. 通過物理構造的裝置作為理論的演示者, 進一步比較從牛頓力學得出的事實物理和計算機模擬結果. 為了能夠進行比較, 有必要設計一個能夠滿足系統要求的令人滿意的控制器. 在設備和控制方面, 為在平臺上平衡球的系統引入比例積分導數控制器. 進一步允許分析以確定穩定自然不穩定或半穩定系統時的局限性. 建立球體平衡平台的理論模型, 並與實際搭建的平台進行比較. 分析理論與實際結果之間的差異, 探討控制理論與系統實施的挑戰.</span></p>
<p><span></span></p>
<h4><span>文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現)</span></h4>
<p><span>摘要內容 : </span>在一個FPGA晶元上開發了兩個並行PID控制器，用於獨立控制一個物件的兩個參數。確保了控制物件的PID控制器的輪廓計算的並行處理，調節器的輸出已經歸一化。通過自然類比，提高了在平台上調節球位置的精度。設計的控制器可用於即時控制具有許多受控參數的高速物體<span>。</span></p>
<p></p>
<h4>文章三 : <span>Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究)</span></h4>
<p><span>摘要內容 : </span>本研究詳細設計並比較了三種控制結構，用於自動穩定球在板上的位置和球的軌跡跟蹤。即PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過設計並進行了實際比較。所有結構都有一個共同的特徵。它是計算控制器參數的方法。通過牛頓方法推導的板上球數學模型和直流電機位置環路控制也是本文的一部分。</p>
<p></p>
<h4>文章四：<span>Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現）</span></h4>
<p><span>摘要內容：</span>開發一個球平衡系統，使用微控制器和相關控制演算法來保持球在橫樑上的平衡，以通過即時感官反饋調整橫樑的角度。在此過程中，製作了三個原型並相互比較，特別是在合理性和成本方面。通過集成一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，可以很容易地設計整個系統。此外，他們將通過微控制器程式設計來理解和實現控制演算法。如果學生對MATLAB知之甚少。開發介面程式以在MATLAB中繪製即時位置曲線。這個簡化的系統將作為連接理論知識和實踐技能的橋樑。所提方法也適用於更複雜的系統<span>。</span></p>
<p><span></span></p>
<p><span></span></p>
<h4><span>文章五: Ball on the plate balancing control system (板上球平衡控制系統)</span></h4>
<p><span>摘要內容 : 平衡問題是一個持續的研究挑戰，適用於從教育到交通的許多興趣領域。二自由度球平衡實驗室試驗台是瞭解控制系統的重要設備。本文重點介紹了在板上平衡球的機械設計。使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。</span></p>
<p><span></span></p>
<h4><span>文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制)</span></h4>
<p><span>摘要內容 : 使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。</span></p>
<p><span></span></p>
<h4>(任務三)</h4>
鋼球平衡台零組件繪圖</div>
<div><a href="/downloads/底座.stl">底座</a></div>
<div></div>
<div>
<h2>w11</h2>
<div>
<div><span>將個人心得打入2a cd2024 評分網站</span></div>
<div><a href="https://mdecd2024.github.io/2astud-2asite/content/g2.html">2a cd2024 評分網站</a></div>
<div></div>
<div>
<h2>w12</h2>
<div>
<div><span>(任務一)</span></div>
<br/>
<div><span>將分組倉儲設為評分網站子模組</span></div>
<div><span></span></div>
<div><a href="https://github.com/mdecd2024/2astud-2asite">評分網站</a></div>
<br/>
<div><span>(任務二)</span></div>
<br/>
<div><span>將鋼球平衡台零組件的繪製</span></div>
<div><a href="/downloads/底座.stl">底座</a></div>
</div>
</div>
</div>
</div>
</div>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p><span><span><!-- 導入 brython 程式庫 --></span></span></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><span><span><!-- 啟動 Brython --></span></span></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><span><span><!-- editor1 開始 --></span></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><span><span><!-- editor1 結束 --></span></span></p>
<hr/>
<p><span><span><!-- ########################################## --></span></span></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><span><span><!-- editor2 開始 --></span></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><span><span><!-- editor2 結束 --></span></span></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>